# FROM maven:3.8.6-openjdk-18-slim AS build
# WORKDIR /home/app
# COPY . /home/app
# RUN mvn -f /home/app/pom.xml clean package
#
# FROM openjdk:18.0-slim
# EXPOSE 5000
# COPY --from=build /home/app/target/*.jar app.jar
# ENTRYPOINT ["sh", "-c", "java -jar /app.jar"]
# Stage 1 - Build\

#Dockerfile Commands

#Maven commands
#mvn-spring-boot:
# run - run apps
# start - Non Blocks - run integrated tests
#stop stops docker
#build-image builds container image

# FROM maven:3.8.5-eclipse-temurin-17 AS builder
#
# WORKDIR /app
# COPY pom.xml .
# COPY src ./src
# RUN mvn clean package -DskipTests
#
# # Stage 2 - Run
# FROM openjdk:17-jdk-slim
#
# WORKDIR /app
# COPY --from=builder /app/target/app.jar app.jar
#
# EXPOSE 8080
# ENTRYPOINT ["java", "-jar", "app.jar"]

# Step	What it does
# FROM maven:3.8.5-eclipse-temurin-17 AS builder	First stage: use Maven + JDK to build your app.
# WORKDIR /app	Set working directory inside container.
# COPY pom.xml . + COPY src ./src	Copy your pom.xml and src/ folder into the container.
# RUN mvn clean package -DskipTests	Build your app, skip running tests for faster build.
# FROM openjdk:17-jdk-slim	Second stage: small, clean Java image to run the app.
# WORKDIR /app	Again set working directory.
# COPY --from=builder /app/target/app.jar app.jar	Copy only the built app.jar (no source code!)
# EXPOSE 8080	Make container port 8080 accessible.
# ENTRYPOINT ["java", "-jar", "app.jar"]	Start the app when container runs.
#
# Make sure this is saved exactly as your Dockerfile (capital D, no extension).
#
# Then build your image:
#
# bash
# Copy
# Edit
# sudo docker build -t myapp:v1 .
# Then run your container:
#
# bash
# Copy
# Edit
# sudo docker run -p 8080:8080 myapp:v1
# Then open:
#
# arduino
# Copy
# Edit
# http://localhost:8080/
# Done âœ…
